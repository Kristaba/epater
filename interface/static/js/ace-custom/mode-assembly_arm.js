define("ace/mode/assembly_arm_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var AssemblyARMHighlightRules = function() {

    this.$rules = { start:
       [ { token: 'keyword.control.assembly',
           regex: '\\b(?:AND|ANDEQ|ANDNE|ANDCS|ANDCC|ANDMI|ANDPL|ANDVS|ANDVC|ANDHI|ANDLS|ANDGE|ANDLT|ANDGT|ANDLE|ANDAL|EOR|EOREQ|EORNE|EORCS|EORCC|EORMI|EORPL|EORVS|EORVC|EORHI|EORLS|EORGE|EORLT|EORGT|EORLE|EORAL|SUB|SUBEQ|SUBNE|SUBCS|SUBCC|SUBMI|SUBPL|SUBVS|SUBVC|SUBHI|SUBLS|SUBGE|SUBLT|SUBGT|SUBLE|SUBAL|RSB|RSBEQ|RSBNE|RSBCS|RSBCC|RSBMI|RSBPL|RSBVS|RSBVC|RSBHI|RSBLS|RSBGE|RSBLT|RSBGT|RSBLE|RSBAL|ADD|ADDEQ|ADDNE|ADDCS|ADDCC|ADDMI|ADDPL|ADDVS|ADDVC|ADDHI|ADDLS|ADDGE|ADDLT|ADDGT|ADDLE|ADDAL|ADC|ADCEQ|ADCNE|ADCCS|ADCCC|ADCMI|ADCPL|ADCVS|ADCVC|ADCHI|ADCLS|ADCGE|ADCLT|ADCGT|ADCLE|ADCAL|SBC|SBCEQ|SBCNE|SBCCS|SBCCC|SBCMI|SBCPL|SBCVS|SBCVC|SBCHI|SBCLS|SBCGE|SBCLT|SBCGT|SBCLE|SBCAL|RSC|RSCEQ|RSCNE|RSCCS|RSCCC|RSCMI|RSCPL|RSCVS|RSCVC|RSCHI|RSCLS|RSCGE|RSCLT|RSCGT|RSCLE|RSCAL|TST|TSTEQ|TSTNE|TSTCS|TSTCC|TSTMI|TSTPL|TSTVS|TSTVC|TSTHI|TSTLS|TSTGE|TSTLT|TSTGT|TSTLE|TSTAL|TEQ|TEQEQ|TEQNE|TEQCS|TEQCC|TEQMI|TEQPL|TEQVS|TEQVC|TEQHI|TEQLS|TEQGE|TEQLT|TEQGT|TEQLE|TEQAL|CMP|CMPEQ|CMPNE|CMPCS|CMPCC|CMPMI|CMPPL|CMPVS|CMPVC|CMPHI|CMPLS|CMPGE|CMPLT|CMPGT|CMPLE|CMPAL|CMN|CMNEQ|CMNNE|CMNCS|CMNCC|CMNMI|CMNPL|CMNVS|CMNVC|CMNHI|CMNLS|CMNGE|CMNLT|CMNGT|CMNLE|CMNAL|ORR|ORREQ|ORRNE|ORRCS|ORRCC|ORRMI|ORRPL|ORRVS|ORRVC|ORRHI|ORRLS|ORRGE|ORRLT|ORRGT|ORRLE|ORRAL|MOV|MOVEQ|MOVNE|MOVCS|MOVCC|MOVMI|MOVPL|MOVVS|MOVVC|MOVHI|MOVLS|MOVGE|MOVLT|MOVGT|MOVLE|MOVAL|BIC|BICEQ|BICNE|BICCS|BICCC|BICMI|BICPL|BICVS|BICVC|BICHI|BICLS|BICGE|BICLT|BICGT|BICLE|BICAL|MVN|MVNEQ|MVNNE|MVNCS|MVNCC|MVNMI|MVNPL|MVNVS|MVNVC|MVNHI|MVNLS|MVNGE|MVNLT|MVNGT|MVNLE|MVNAL|LSR|LSREQ|LSRNE|LSRCS|LSRCC|LSRMI|LSRPL|LSRVS|LSRVC|LSRHI|LSRLS|LSRGE|LSRLT|LSRGT|LSRLE|LSRAL|LSL|LSLEQ|LSLNE|LSLCS|LSLCC|LSLMI|LSLPL|LSLVS|LSLVC|LSLHI|LSLLS|LSLGE|LSLLT|LSLGT|LSLLE|LSLAL|ASR|ASREQ|ASRNE|ASRCS|ASRCC|ASRMI|ASRPL|ASRVS|ASRVC|ASRHI|ASRLS|ASRGE|ASRLT|ASRGT|ASRLE|ASRAL|ROR|ROREQ|RORNE|RORCS|RORCC|RORMI|RORPL|RORVS|RORVC|RORHI|RORLS|RORGE|RORLT|RORGT|RORLE|RORAL|RRX|RRXEQ|RRXNE|RRXCS|RRXCC|RRXMI|RRXPL|RRXVS|RRXVC|RRXHI|RRXLS|RRXGE|RRXLT|RRXGT|RRXLE|RRXAL|MRS|MRSEQ|MRSNE|MRSCS|MRSCC|MRSMI|MRSPL|MRSVS|MRSVC|MRSHI|MRSLS|MRSGE|MRSLT|MRSGT|MRSLE|MRSAL|MSR|MSREQ|MSRNE|MSRCS|MSRCC|MSRMI|MSRPL|MSRVS|MSRVC|MSRHI|MSRLS|MSRGE|MSRLT|MSRGT|MSRLE|MSRAL|LDR|LDREQ|LDRNE|LDRCS|LDRCC|LDRMI|LDRPL|LDRVS|LDRVC|LDRHI|LDRLS|LDRGE|LDRLT|LDRGT|LDRLE|LDRAL|STR|STREQ|STRNE|STRCS|STRCC|STRMI|STRPL|STRVS|STRVC|STRHI|STRLS|STRGE|STRLT|STRGT|STRLE|STRAL|LDM|LDMEQ|LDMNE|LDMCS|LDMCC|LDMMI|LDMPL|LDMVS|LDMVC|LDMHI|LDMLS|LDMGE|LDMLT|LDMGT|LDMLE|LDMAL|STM|STMEQ|STMNE|STMCS|STMCC|STMMI|STMPL|STMVS|STMVC|STMHI|STMLS|STMGE|STMLT|STMGT|STMLE|STMAL|PUSH|PUSHEQ|PUSHNE|PUSHCS|PUSHCC|PUSHMI|PUSHPL|PUSHVS|PUSHVC|PUSHHI|PUSHLS|PUSHGE|PUSHLT|PUSHGT|PUSHLE|PUSHAL|POP|POPEQ|POPNE|POPCS|POPCC|POPMI|POPPL|POPVS|POPVC|POPHI|POPLS|POPGE|POPLT|POPGT|POPLE|POPAL|B|BEQ|BNE|BCS|BCC|BMI|BPL|BVS|BVC|BHI|BLS|BGE|BLT|BGT|BLE|BAL|BX|BXEQ|BXNE|BXCS|BXCC|BXMI|BXPL|BXVS|BXVC|BXHI|BXLS|BXGE|BXLT|BXGT|BXLE|BXAL|BL|BLEQ|BLNE|BLCS|BLCC|BLMI|BLPL|BLVS|BLVC|BLHI|BLLS|BLGE|BLLT|BLGT|BLLE|BLAL|BLX|BLXEQ|BLXNE|BLXCS|BLXCC|BLXMI|BLXPL|BLXVS|BLXVC|BLXHI|BLXLS|BLXGE|BLXLT|BLXGT|BLXLE|BLXAL|MUL|MULEQ|MULNE|MULCS|MULCC|MULMI|MULPL|MULVS|MULVC|MULHI|MULLS|MULGE|MULLT|MULGT|MULLE|MULAL|MLA|MLAEQ|MLANE|MLACS|MLACC|MLAMI|MLAPL|MLAVS|MLAVC|MLAHI|MLALS|MLAGE|MLALT|MLAGT|MLALE|MLAAL|UMULL|UMULLEQ|UMULLNE|UMULLCS|UMULLCC|UMULLMI|UMULLPL|UMULLVS|UMULLVC|UMULLHI|UMULLLS|UMULLGE|UMULLLT|UMULLGT|UMULLLE|UMULLAL|UMLAL|UMLALEQ|UMLALNE|UMLALCS|UMLALCC|UMLALMI|UMLALPL|UMLALVS|UMLALVC|UMLALHI|UMLALLS|UMLALGE|UMLALLT|UMLALGT|UMLALLE|UMLALAL|SMULL|SMULLEQ|SMULLNE|SMULLCS|SMULLCC|SMULLMI|SMULLPL|SMULLVS|SMULLVC|SMULLHI|SMULLLS|SMULLGE|SMULLLT|SMULLGT|SMULLLE|SMULLAL|SMLAL|SMLALEQ|SMLALNE|SMLALCS|SMLALCC|SMLALMI|SMLALPL|SMLALVS|SMLALVC|SMLALHI|SMLALLS|SMLALGE|SMLALLT|SMLALGT|SMLALLE|SMLALAL|SWP|SWPEQ|SWPNE|SWPCS|SWPCC|SWPMI|SWPPL|SWPVS|SWPVC|SWPHI|SWPLS|SWPGE|SWPLT|SWPGT|SWPLE|SWPAL|SWI|SWIEQ|SWINE|SWICS|SWICC|SWIMI|SWIPL|SWIVS|SWIVC|SWIHI|SWILS|SWIGE|SWILT|SWIGT|SWILE|SWIAL|SVC|SVCEQ|SVCNE|SVCCS|SVCCC|SVCMI|SVCPL|SVCVS|SVCVC|SVCHI|SVCLS|SVCGE|SVCLT|SVCGT|SVCLE|SVCAL|NOP|NOPEQ|NOPNE|NOPCS|NOPCC|NOPMI|NOPPL|NOPVS|NOPVC|NOPHI|NOPLS|NOPGE|NOPLT|NOPGT|NOPLE|NOPAL|LDMED|LDMEDEQ|LDMEDNE|LDMEDCS|LDMEDCC|LDMEDMI|LDMEDPL|LDMEDVS|LDMEDVC|LDMEDHI|LDMEDLS|LDMEDGE|LDMEDLT|LDMEDGT|LDMEDLE|LDMEDAL|LDMIB|LDMIBEQ|LDMIBNE|LDMIBCS|LDMIBCC|LDMIBMI|LDMIBPL|LDMIBVS|LDMIBVC|LDMIBHI|LDMIBLS|LDMIBGE|LDMIBLT|LDMIBGT|LDMIBLE|LDMIBAL|LDMFD|LDMFDEQ|LDMFDNE|LDMFDCS|LDMFDCC|LDMFDMI|LDMFDPL|LDMFDVS|LDMFDVC|LDMFDHI|LDMFDLS|LDMFDGE|LDMFDLT|LDMFDGT|LDMFDLE|LDMFDAL|LDMIA|LDMIAEQ|LDMIANE|LDMIACS|LDMIACC|LDMIAMI|LDMIAPL|LDMIAVS|LDMIAVC|LDMIAHI|LDMIALS|LDMIAGE|LDMIALT|LDMIAGT|LDMIALE|LDMIAAL|LDMEA|LDMEAEQ|LDMEANE|LDMEACS|LDMEACC|LDMEAMI|LDMEAPL|LDMEAVS|LDMEAVC|LDMEAHI|LDMEALS|LDMEAGE|LDMEALT|LDMEAGT|LDMEALE|LDMEAAL|LDMDB|LDMDBEQ|LDMDBNE|LDMDBCS|LDMDBCC|LDMDBMI|LDMDBPL|LDMDBVS|LDMDBVC|LDMDBHI|LDMDBLS|LDMDBGE|LDMDBLT|LDMDBGT|LDMDBLE|LDMDBAL|LDMFA|LDMFAEQ|LDMFANE|LDMFACS|LDMFACC|LDMFAMI|LDMFAPL|LDMFAVS|LDMFAVC|LDMFAHI|LDMFALS|LDMFAGE|LDMFALT|LDMFAGT|LDMFALE|LDMFAAL|LDMDA|LDMDAEQ|LDMDANE|LDMDACS|LDMDACC|LDMDAMI|LDMDAPL|LDMDAVS|LDMDAVC|LDMDAHI|LDMDALS|LDMDAGE|LDMDALT|LDMDAGT|LDMDALE|LDMDAAL|STMFA|STMFAEQ|STMFANE|STMFACS|STMFACC|STMFAMI|STMFAPL|STMFAVS|STMFAVC|STMFAHI|STMFALS|STMFAGE|STMFALT|STMFAGT|STMFALE|STMFAAL|STMIB|STMIBEQ|STMIBNE|STMIBCS|STMIBCC|STMIBMI|STMIBPL|STMIBVS|STMIBVC|STMIBHI|STMIBLS|STMIBGE|STMIBLT|STMIBGT|STMIBLE|STMIBAL|STMEA|STMEAEQ|STMEANE|STMEACS|STMEACC|STMEAMI|STMEAPL|STMEAVS|STMEAVC|STMEAHI|STMEALS|STMEAGE|STMEALT|STMEAGT|STMEALE|STMEAAL|STMIA|STMIAEQ|STMIANE|STMIACS|STMIACC|STMIAMI|STMIAPL|STMIAVS|STMIAVC|STMIAHI|STMIALS|STMIAGE|STMIALT|STMIAGT|STMIALE|STMIAAL|STMFD|STMFDEQ|STMFDNE|STMFDCS|STMFDCC|STMFDMI|STMFDPL|STMFDVS|STMFDVC|STMFDHI|STMFDLS|STMFDGE|STMFDLT|STMFDGT|STMFDLE|STMFDAL|STMDB|STMDBEQ|STMDBNE|STMDBCS|STMDBCC|STMDBMI|STMDBPL|STMDBVS|STMDBVC|STMDBHI|STMDBLS|STMDBGE|STMDBLT|STMDBGT|STMDBLE|STMDBAL|STMED|STMEDEQ|STMEDNE|STMEDCS|STMEDCC|STMEDMI|STMEDPL|STMEDVS|STMEDVC|STMEDHI|STMEDLS|STMEDGE|STMEDLT|STMEDGT|STMEDLE|STMEDAL|STMDA|STMDAEQ|STMDANE|STMDACS|STMDACC|STMDAMI|STMDAPL|STMDAVS|STMDAVC|STMDAHI|STMDALS|STMDAGE|STMDALT|STMDAGT|STMDALE|STMDAAL|STRB|STRBEQ|STRBNE|STRBCS|STRBCC|STRBMI|STRBPL|STRBVS|STRBVC|STRBHI|STRBLS|STRBGE|STRBLT|STRBGT|STRBLE|STRBAL|LDRB|LDRBEQ|LDRBNE|LDRBCS|LDRBCC|LDRBMI|LDRBPL|LDRBVS|LDRBVC|LDRBHI|LDRBLS|LDRBGE|LDRBLT|LDRBGT|LDRBLE|LDRBAL|ANDS|ANDSEQ|ANDSNE|ANDSCS|ANDSCC|ANDSMI|ANDSPL|ANDSVS|ANDSVC|ANDSHI|ANDSLS|ANDSGE|ANDSLT|ANDSGT|ANDSLE|ANDSAL|EORS|EORSEQ|EORSNE|EORSCS|EORSCC|EORSMI|EORSPL|EORSVS|EORSVC|EORSHI|EORSLS|EORSGE|EORSLT|EORSGT|EORSLE|EORSAL|SUBS|SUBSEQ|SUBSNE|SUBSCS|SUBSCC|SUBSMI|SUBSPL|SUBSVS|SUBSVC|SUBSHI|SUBSLS|SUBSGE|SUBSLT|SUBSGT|SUBSLE|SUBSAL|RSBS|RSBSEQ|RSBSNE|RSBSCS|RSBSCC|RSBSMI|RSBSPL|RSBSVS|RSBSVC|RSBSHI|RSBSLS|RSBSGE|RSBSLT|RSBSGT|RSBSLE|RSBSAL|ADDS|ADDSEQ|ADDSNE|ADDSCS|ADDSCC|ADDSMI|ADDSPL|ADDSVS|ADDSVC|ADDSHI|ADDSLS|ADDSGE|ADDSLT|ADDSGT|ADDSLE|ADDSAL|ADCS|ADCSEQ|ADCSNE|ADCSCS|ADCSCC|ADCSMI|ADCSPL|ADCSVS|ADCSVC|ADCSHI|ADCSLS|ADCSGE|ADCSLT|ADCSGT|ADCSLE|ADCSAL|SBCS|SBCSEQ|SBCSNE|SBCSCS|SBCSCC|SBCSMI|SBCSPL|SBCSVS|SBCSVC|SBCSHI|SBCSLS|SBCSGE|SBCSLT|SBCSGT|SBCSLE|SBCSAL|RSCS|RSCSEQ|RSCSNE|RSCSCS|RSCSCC|RSCSMI|RSCSPL|RSCSVS|RSCSVC|RSCSHI|RSCSLS|RSCSGE|RSCSLT|RSCSGT|RSCSLE|RSCSAL|TSTS|TSTSEQ|TSTSNE|TSTSCS|TSTSCC|TSTSMI|TSTSPL|TSTSVS|TSTSVC|TSTSHI|TSTSLS|TSTSGE|TSTSLT|TSTSGT|TSTSLE|TSTSAL|TEQS|TEQSEQ|TEQSNE|TEQSCS|TEQSCC|TEQSMI|TEQSPL|TEQSVS|TEQSVC|TEQSHI|TEQSLS|TEQSGE|TEQSLT|TEQSGT|TEQSLE|TEQSAL|CMPS|CMPSEQ|CMPSNE|CMPSCS|CMPSCC|CMPSMI|CMPSPL|CMPSVS|CMPSVC|CMPSHI|CMPSLS|CMPSGE|CMPSLT|CMPSGT|CMPSLE|CMPSAL|CMNS|CMNSEQ|CMNSNE|CMNSCS|CMNSCC|CMNSMI|CMNSPL|CMNSVS|CMNSVC|CMNSHI|CMNSLS|CMNSGE|CMNSLT|CMNSGT|CMNSLE|CMNSAL|ORRS|ORRSEQ|ORRSNE|ORRSCS|ORRSCC|ORRSMI|ORRSPL|ORRSVS|ORRSVC|ORRSHI|ORRSLS|ORRSGE|ORRSLT|ORRSGT|ORRSLE|ORRSAL|MOVS|MOVSEQ|MOVSNE|MOVSCS|MOVSCC|MOVSMI|MOVSPL|MOVSVS|MOVSVC|MOVSHI|MOVSLS|MOVSGE|MOVSLT|MOVSGT|MOVSLE|MOVSAL|BICS|BICSEQ|BICSNE|BICSCS|BICSCC|BICSMI|BICSPL|BICSVS|BICSVC|BICSHI|BICSLS|BICSGE|BICSLT|BICSGT|BICSLE|BICSAL|MVNS|MVNSEQ|MVNSNE|MVNSCS|MVNSCC|MVNSMI|MVNSPL|MVNSVS|MVNSVC|MVNSHI|MVNSLS|MVNSGE|MVNSLT|MVNSGT|MVNSLE|MVNSAL|MULS|MULSEQ|MULSNE|MULSCS|MULSCC|MULSMI|MULSPL|MULSVS|MULSVC|MULSHI|MULSLS|MULSGE|MULSLT|MULSGT|MULSLE|MULSAL|MLAS|MLASEQ|MLASNE|MLASCS|MLASCC|MLASMI|MLASPL|MLASVS|MLASVC|MLASHI|MLASLS|MLASGE|MLASLT|MLASGT|MLASLE|MLASAL|UMULLS|UMULLSEQ|UMULLSNE|UMULLSCS|UMULLSCC|UMULLSMI|UMULLSPL|UMULLSVS|UMULLSVC|UMULLSHI|UMULLSLS|UMULLSGE|UMULLSLT|UMULLSGT|UMULLSLE|UMULLSAL|SMULLS|SMULLSEQ|SMULLSNE|SMULLSCS|SMULLSCC|SMULLSMI|SMULLSPL|SMULLSVS|SMULLSVC|SMULLSHI|SMULLSLS|SMULLSGE|SMULLSLT|SMULLSGT|SMULLSLE|SMULLSAL|SMLALS|SMLALSEQ|SMLALSNE|SMLALSCS|SMLALSCC|SMLALSMI|SMLALSPL|SMLALSVS|SMLALSVC|SMLALSHI|SMLALSLS|SMLALSGE|SMLALSLT|SMLALSGT|SMLALSLE|SMLALSAL|UMLALS|UMLALSEQ|UMLALSNE|UMLALSCS|UMLALSCC|UMLALSMI|UMLALSPL|UMLALSVS|UMLALSVC|UMLALSHI|UMLALSLS|UMLALSGE|UMLALSLT|UMLALSGT|UMLALSLE|UMLALSAL)\\b'},
         { token: 'asmcomment.assembly',
           regex: ';.*$' },
         { token: 'variable.parameter.register.assembly',
           regex: '\\b(?:R[0-9]|R1[0-5]|SL|FP|IP|SP|LR|PC|CPSR|SPSR)\\b'},
         { token: 'sectiontitle.assembly',
           regex: 'SECTION\\s(?:INTVEC|CODE|DATA)' },
         { token: 'memdeclare.assembly',
           regex: '\\bD[CS](?:8|16|32)\\b' },
         { token: 'constant.character.assembly',
           regex: '#-?0x[0-9a-fA-F]+' },
           { token: 'constant.character.assembly',
           regex: '#-?[0-9]+' },
         { token: 'label.assembly',
           regex: '^[ \t]*[a-zA-Z0-9_]*' }
    ] }

    this.normalizeRules();
};

AssemblyARMHighlightRules.metaData = { fileTypes: [ 's' ],
      name: 'Assembly arm',
      scopeName: 'source.assembly' };


oop.inherits(AssemblyARMHighlightRules, TextHighlightRules);

exports.AssemblyARMHighlightRules = AssemblyARMHighlightRules;
});

define("ace/mode/folding/coffee",["require","exports","module","ace/lib/oop","ace/mode/folding/fold_mode","ace/range"], function(require, exports, module) {
"use strict";

var oop = require("../../lib/oop");
var BaseFoldMode = require("./fold_mode").FoldMode;
var Range = require("../../range").Range;

var FoldMode = exports.FoldMode = function() {};
oop.inherits(FoldMode, BaseFoldMode);

(function() {

    this.getFoldWidgetRange = function(session, foldStyle, row) {
        var range = this.indentationBlock(session, row);
        if (range)
            return range;

        var re = /\S/;
        var line = session.getLine(row);
        var startLevel = line.search(re);
        if (startLevel == -1 || line[startLevel] != "#")
            return;

        var startColumn = line.length;
        var maxRow = session.getLength();
        var startRow = row;
        var endRow = row;

        while (++row < maxRow) {
            line = session.getLine(row);
            var level = line.search(re);

            if (level == -1)
                continue;

            if (line[level] != "#")
                break;

            endRow = row;
        }

        if (endRow > startRow) {
            var endColumn = session.getLine(endRow).length;
            return new Range(startRow, startColumn, endRow, endColumn);
        }
    };
    this.getFoldWidget = function(session, foldStyle, row) {
        var line = session.getLine(row);
        var indent = line.search(/\S/);
        var next = session.getLine(row + 1);
        var prev = session.getLine(row - 1);
        var prevIndent = prev.search(/\S/);
        var nextIndent = next.search(/\S/);

        if (indent == -1) {
            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? "start" : "";
            return "";
        }
        if (prevIndent == -1) {
            if (indent == nextIndent && line[indent] == "#" && next[indent] == "#") {
                session.foldWidgets[row - 1] = "";
                session.foldWidgets[row + 1] = "";
                return "start";
            }
        } else if (prevIndent == indent && line[indent] == "#" && prev[indent] == "#") {
            if (session.getLine(row - 2).search(/\S/) == -1) {
                session.foldWidgets[row - 1] = "start";
                session.foldWidgets[row + 1] = "";
                return "";
            }
        }

        if (prevIndent!= -1 && prevIndent < indent)
            session.foldWidgets[row - 1] = "start";
        else
            session.foldWidgets[row - 1] = "";

        if (indent < nextIndent)
            return "start";
        else
            return "";
    };

}).call(FoldMode.prototype);

});

define("ace/mode/assembly_arm",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/assembly_arm_highlight_rules","ace/mode/folding/coffee"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextMode = require("./text").Mode;
var AssemblyARMHighlightRules = require("./assembly_arm_highlight_rules").AssemblyARMHighlightRules;
var FoldMode = require("./folding/coffee").FoldMode;

var Mode = function() {
    this.HighlightRules = AssemblyARMHighlightRules;
    this.foldingRules = new FoldMode();
};
oop.inherits(Mode, TextMode);

(function() {
    this.lineCommentStart = ";";
    this.$id = "ace/mode/assembly_arm";
}).call(Mode.prototype);

exports.Mode = Mode;
});
