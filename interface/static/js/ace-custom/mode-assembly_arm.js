define("ace/mode/assembly_arm_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var AssemblyARMHighlightRules = function() {

    this.$rules = { start:
       [ { token: 'keyword.control.assembly',
           regex: '\\b(MSRLS|BPL|LDRALSB|STMCC|STRVCH|MVNLE|RSBGTS|STCLSL|SMULLGE|MRCLE|ANDGT|UMLALLT|MOVAL|CDPAL|ORRNES|TSTCS|CDPLE|LDMALDA|STRGEBT|LDMMIEA|STREQSB|STMHIED|MRCPL|STMVCIB|STCHIL|LDRPLBT|SMULL|STRCST|ADDHI|MVNEQ|ADCCC|SMLALLSS|ANDLSS|ADCVSS|SMULLLTS|LDCAL|LDRCCBT|LDRMI|ORRLES|LDMNEFD|TEQLT|STCLEL|LDCMI|ORRMI|RSCPL|LDRCCB|CDPHI|LDRVSB|SMULLGES|CDPNE|SMLALLES|MVNNES|LDRGTH|STMLSIA|ANDEQ|STMCS|LDMCCFA|STCGT|SMULLVC|MLAGE|STMLSFA|MSRLE|BXAL|LDRNET|STRGE|STRLSBT|UMULLLES|TEQVC|SUBGTS|CMNGE|LDMLSED|EOREQS|ORRGTS|MULEQS|RSBMI|STRT|MOVGTS|STRLTB|RSBHIS|LDMCCDA|ADCGTS|SUBCC|ANDCCS|SMLALPL|UMLALEQ|UMULLS|MLAPL|RSCVS|STMNEFD|ADCPL|SMLALCCS|ADDNES|SWPNE|MOVPL|CMNVS|LDRCC|MRCCS|ORRLE|MULCSS|BXGT|STMCCDB|ADDVS|UMULLGT|MULGT|ORRHI|BICGES|LDMEQ|RSBNE|LDRGTSB|LDMALIA|STRB|LDMLTFD|RSCGTS|STRNET|STMCSFA|LDRNEH|STRPLB|SWPB|EORGTS|LDREQH|STMLT|STMPLIB|STRH|MCRCC|STRGTSB|MVNVSS|TSTEQ|RSCLS|MLALTS|LDCVCL|LDCHIL|LDMNEDA|LDCGT|LDRNEBT|STMGEDA|SBCMI|ORRALS|UMULLCSS|UMULLVCS|STMVCFD|SWPLSB|UMLALNES|LDRGTT|STRCCBT|EORPL|TST|STMPLFA|BICHIS|SWPEQB|LDRLSBT|CMPMI|STRGEH|LDRLSSB|LDMCC|SBCCCS|MCRLE|ADD|MRCGE|RSCVC|STMCSDB|LDMLTDB|STMHIDA|STMPL|LDMGTDA|SWICS|LDMFA|STRLEBT|LDMLTED|STRLTSB|STMNEED|BICEQ|LDRVS|SUBEQS|MLA|STMVCFA|BXPL|MVNLSS|STRBT|LDCLEL|TEQLE|RSCCCS|RSBVC|ANDLES|RSBNES|LDMVSDA|ADCNE|MSREQ|SBCHIS|MULLT|SMULLHIS|MRCGT|MVNMI|LDMNEDB|SUBCCS|UMULLMI|STMGTFA|LDMVCDA|TSTAL|LDMHIIA|RSCCSS|SWPLTB|STCGEL|STCVCL|ORRGE|SWIPL|ORRVCS|MULVC|UMLALLE|LDRALB|MLAEQS|LDCCS|STMHI|LDMEQDA|STMGT|SUBS|MLACS|MRC|RSBCS|ADCPLS|STREQ|MVNCS|ANDGE|LDCLS|LDMHIEA|ADDCCS|STMLEDA|STCEQ|LDCLSL|LDMHIDB|STMVCED|CMNPL|SMULLCC|LDRVSH|RSBMIS|LDMALED|LDRVSBT|EORCCS|SWIGT|MULNE|LDMCCIB|RSBLS|UMULLLT|BGE|STRCS|ORRLT|ADCHI|RSBVCS|CMPPL|MOVMI|BXGE|EORPLS|STRLSH|UMLALGT|STREQT|TEQGT|CMPVC|MULS|STMPLIA|STMALFA|MVNAL|LDMGEED|SWILE|ADCVS|STCVS|LDCLTL|LDMNEIB|STRHISH|STMCCDA|ADCGE|UMULLGE|LDMLSDB|STMEQED|SMULLPLS|STRVCT|MRCMI|SWIMI|STRPLBT|BICVS|ANDCC|STRLTSH|CMPCC|SUBNES|LDRLEH|MOVVSS|SWI|ANDVS|LDRNE|LDMPLDB|STMCSIA|LDMCS|LDRHIH|LDRCCT|STMALEA|STRLS|BXHI|SWPGT|SWPPLB|SWILS|STMIB|LDRLEBT|LDRMIBT|TEQ|SMULLNES|MRSAL|CMPHI|MOVLT|SMULLLE|SWPAL|UMULLLTS|ANDPLS|MULVCS|LDRVC|STMLSFD|BXLS|MULAL|SMULLEQS|BICHI|SBC|ADDAL|STMHIFA|LDRCCH|LDRLS|STRGESB|SUBGT|ORRAL|ANDNES|ADDCSS|SWPMIB|UMULLGES|MLACC|STMCSDA|STMALDA|UMULLVSS|ADDMIS|LDRCSH|RSBCSS|RSBPL|LDMLEDB|EORHIS|STRLTBT|EORNES|LDRCST|MRCLT|RSBLES|MULLTS|TEQPL|SBCNES|STREQSH|LDRPLT|MRSMI|BICNES|BXEQ|LDCLT|LDRALH|STRLEB|CMNMI|RSCALS|STCPL|TSTGT|MSRLT|STMLTEA|LDMVCFA|TEQVS|CMNCC|LDMVSDB|MRSPL|BX|LDMHIED|RSCCS|LDMGE|STMCCEA|MULNES|LDMMIFD|MLAHI|STMHIDB|MCRNE|LDMVSFA|SUBLE|SMLALPLS|EORGE|CMPCS|SWP|LDMCSED|TSTLS|SUBLSS|LDRSB|UMULLPL|BEQ|STRLTH|RSCLE|SMLALMI|MOVHI|EORMIS|STMGEFD|SUBPL|LDMHIIB|STMLEEA|LDMLSIB|LDREQSB|LDRALSH|SWPCCB|MOVGES|MOVCC|MRCCC|MULEQ|SBCVCS|MVNCSS|STMGEDB|STMMIEA|LDMLTIB|BICMI|STMVCDA|ADDEQ|STRVSH|CMPLT|MVNGTS|STRCCSB|MSRNE|LDMCSFD|MSRHI|BICCC|TEQNE|STMLSDB|STRLEH|EORVC|BICGTS|STCLTL|ANDCS|EORNE|ORRCS|LDRCCSB|LDMVCIB|STMDB|UMULLEQ|SUBMI|LDRMISB|ORRGT|ADDVCS|SMLALVC|RSCEQ|SUBVCS|STMLSDA|STCCS|STMVSEA|LDMCSIA|RSBVS|MULHIS|STRVST|BICLT|SBCVS|ADCEQ|LDMNE|LDMED|RSBGT|MSRVS|SWPNEB|SWPMI|SBCNE|ANDVCS|STMHIEA|MUL|ADCLS|SMULLMI|STRCCSH|STMVSIB|LDMPLEA|STMVSDB|TSTMI|STMALED|STCLT|STMMIDA|LDRGEBT|STRALBT|STMEQFD|LDRHI|STMLTIA|LDRAL|CMNLE|SWPGTB|B|LDRGEB|STMMIIB|BLLE|STRNE|STRNESB|STMHIIB|LDC|MVNVS|SBCGTS|LDCL|STRNEB|CMP|LDRCSB|LDMGTIA|LDMLS|STMGEIB|ADCS|STMCSIB|BLEQ|STMVS|LDRGESH|BAL|SWICC|CDPGE|LDMGT|STRPLSH|SUBAL|ADDLT|STMMIIA|MRCAL|MLAGES|LDRGESB|LDMEQEA|LDMEQED|BICAL|LDMPLIB|MOVALS|ADDMI|LDMLE|LDRPLB|MRCEQ|SUBLES|ANDPL|BGT|RSCNE|LDRVCT|LDMHIFD|STRLESH|MRSGT|SMLALVSS|STCCSL|MSRCS|STMLE|MLAHIS|STRCC|LDCVSL|STRPLT|LDRLET|BICLS|LDMLEDA|STMGTDA|SUBVC|UMLALHIS|SMULLMIS|BLS|LDMLEFA|MLANES|STRSH|LDMAL|MRCHI|ANDMI|ADDPL|STRALSH|ANDGES|BICVC|LDMLEIB|UMLALVCS|STMCSEA|LDMHIDA|STMALIB|STRMISH|STMLEFA|SMULLGT|STMEA|STMEQDA|MOVNES|TEQLS|SBCPLS|STRVC|ADCHIS|BHI|LDCEQ|MCRPL|SWIVC|STMLEIA|STRMIH|SMLALGTS|LDMVSIB|ADDNE|CMNEQ|ADDCC|SWPHI|LDMGEIA|MSRMI|LDMGTDB|LDRCCSH|SBCCC|STMMIDB|BICPLS|STMNEDA|TSTPL|LDRALBT|RSBLTS|CDPGT|STRCSB|LDRLTSH|ANDEQS|STRNEH|MULVSS|MCR|MCRVS|UMULLVS|SMULLLT|UMLALLES|BMI|RSCEQS|LDCVC|SMULLVCS|LDMNEFA|SMLALVS|SWPGEB|RSBLE|MRSGE|STRVSBT|STCMIL|LDMPLED|STRVSSH|ANDHI|RSB|MULGTS|LDR|LDRMIT|UMLALGE|EORLES|SBCCSS|MLALES|MRSLS|STMMI|MVNLTS|SUBALS|CDPLS|CDPVS|LDCGE|SMLALLE|LDMNEED|LDCPL|LDMCSDB|LDMCSFA|LDMEQIA|STMLTDA|LDMIA|STM|BICALS|SMULLLSS|LDCPLL|MULGE|ORRVSS|STRGT|MCRGE|LDMLTDA|RSBS|EORLS|LDRLTBT|UMULLCC|ADDVC|MOVPLS|BVS|CDPVC|UMULLLSS|MVNHI|RSCNES|LDMEQIB|STRLSSB|LDMVCED|EORCSS|MULHI|BXCC|STMGTED|TSTVS|EORLT|MOVLS|MVNGT|LDMLTFA|STMNEDB|STRVCBT|SMLALCS|LDCCCL|LDMDB|LDRLTT|BICS|LDRCSSB|LDMVSED|STMGTIB|LDRMIB|STRAL|MULPL|EORVS|SWIAL|CDPMI|ADCCCS|BXVS|BNE|LDRVCBT|ANDLT|STRNEBT|SUBMIS|RSCHI|RSBHI|MVNLT|MRCLS|LDRPLSB|STMFD|SMULLVSS|STRALT|ANDCSS|STMGTDB|SUBNE|LDRHISH|MLAGTS|SUBHI|LDRLSH|CMPVS|LDRMIH|LDRVCSB|STRGTH|STRLSSH|LDMLEFD|ADDLTS|ANDALS|UMULL|BLT|LDMVCEA|BICVCS|LDCLE|ADCMI|ADDCS|LDMNEEA|STRVCSH|STRMIBT|STMMIFA|BICPL|BLCC|SMULLEQ|EOREQ|STMALDB|STRLT|STRLST|STCALL|LDRH|MRSVC|TEQEQ|STMALFD|MLALSS|CDP|STMVSFA|BLHI|STRMIB|STMPLED|UMULLCS|MLAGT|STRVCSB|SMLALHI|MCRLS|MLAVSS|STMCCIB|LDRGEH|LDMALDB|RSCCC|STMVCEA|STRCCB|SMLAL|STMVCDB|STMPLEA|LDMVC|MOVEQS|ADC|MVNCCS|UMULLHIS|LDREQBT|LDMEA|STMNE|UMULLNE|BICMIS|LDRHIT|LDRLEB|ANDLTS|LDMFD|SMULLNE|LDM|MSRGT|MRSNE|RSBGE|LDRVSSB|LDRLST|BXCS|MRCVC|SBCLT|SUBEQ|LDMGTIB|MRCVS|STMEQDB|EORALS|SMULLPL|STMIA|STR|STRLESB|STRCCH|SMULLLES|LDRNESH|STRGTT|LDMLEED|UMULLGTS|BICCS|LDMIB|STCNE|ANDLS|MVNHIS|MOVEQ|LDMCCEA|LDCNE|STRGTSH|ADCEQS|STMLSEA|MVNLS|SMULLCS|EORCC|STMVC|SWPLS|EORCS|UMULLLS|RSCS|STMGEIA|LDRPLSH|LDMVCIA|ADDHIS|SWPLE|LDMALFA|ADDGES|MCRMI|RSCGT|BCC|LDMCCFD|SBCGE|MVNVCS|BLLT|RSC|ORREQ|RSBEQ|STRCSSH|UMLALPL|MULALS|STRALSB|STRHIB|BLGT|TSTGE|UMLALEQS|SWPHIB|SWPCSB|STCAL|RSCGE|STMPLDB|SBCLES|TEQHI|STRLET|STMEQIB|LDRLTH|STRGEB|MULLSS|RSBCCS|MOVCS|SWINE|STREQB|LDRLT|STMEQFA|ADCLT|STMNEFA|STMPLDA|LDRGT|UMULLEQS|MOVVS|ANDGTS|MVNNE|LDRNESB|UMLALHI|STMALIA|ORRCSS|RSBLSS|STMGEFA|SUBHIS|STCLS|UMLALLTS|ORRVC|MSRCC|MULGES|STRPLSB|STCHI|BICLSS|MULVS|ORRLSS|ORRNE|STMLTIB|STMLEFD|ADDLSS|STMMIED|MSRGE|ORRVS|SUBLTS|LDRPLH|TSTLE|BICEQS|STCVSL|LDRCSBT|MRCNE|LDREQT|STCLE|SWPLT|STMCCED|BLMI|LDCCSL|ORRCCS|CDPCC|STMVSED|SMLALCC|LDMPLIA|UMLALCS|LDMLT|SWPCC|STMGTIA|SMULLS|STMCSFD|MRS|ORRHIS|CDPEQ|LDREQ|LDRVCSH|BICLE|STREQBT|SMULLCCS|STMCSED|MOVNE|STCPLL|BICCCS|LDCVS|ORRCC|MCRCS|UMLALCC|RSCPLS|ADDS|CMNLT|ADDPLS|STRMIT|SWPVCB|STRCCT|LDMALEA|MLAEQ|ADCAL|LDRGTBT|STMCCFD|STRVS|LDMPLDA|ADCVC|BICVSS|LDRLTB|STMVCIA|LDMMIIB|SWPPL|UMLALGES|LDRGE|STMGEED|MRSVS|UMULLPLS|LDRLSB|EORS|LDMCSEA|LDRVCB|STMCCIA|STREQH|STRGESH|STRGET|MLAVCS|STMLTDB|STMNEEA|MULMIS|MULCC|EORAL|MVNVC|SBCCS|SBCHI|MLACSS|ADDEQS|UMLALAL|LDRLESH|LDMCSDA|LDMVSEA|BLCS|MOVLE|LDMALIB|MVNALS|TEQCS|UMLALVS|MLAALS|LDMVS|MLACCS|SMLALLS|STMGE|LDMCCIA|RSBCC|MLAS|STMLEIB|STRNESH|EORGT|UMLALVSS|BXVC|MSR|SMULLHI|RSCVSS|MOVLSS|MCRGT|BICLES|SUBPLS|MSRPL|SBCS|UMLALALS|LDMGEEA|SWPGE|LDMMI|UMLALMIS|LDCGTL|LDRLSSH|MOVCSS|STRHIT|UMLALLSS|UMULLVC|TEQGE|LDMMIFA|LDRT|STRHISB|UMLAL|STRVSB|SMLALALS|CMPLS|LDRHIBT|STCNEL|MRSCS|ORRGES|SWPVC|RSCLT|SUBGES|STMAL|MRSHI|RSBGES|STMEQ|BLLS|STCCCL|STRALB|MVNPLS|MLAPLS|ORRMIS|MRSLE|MLAAL|EORLE|SUBLT|BCS|SWIGE|LDRLTSB|ADCLSS|LDMHIFA|RSCVCS|LDRVST|BXLE|MSRAL|STRLTT|STMNEIB|BLVC|UMULLLE|SMLALVCS|MLANE|MLAMIS|RSCHIS|BL|BICNE|ORR|TEQCC|STRCSBT|STCEQL|SBCMIS|SUBVS|STMFA|MSRVC|MLAVS|CMNNE|SMULLAL|STMHIFD|ANDLE|UMLALMI|UMLALNE|LDCHI|CMNVC|EORLTS|LDMLSEA|TSTLT|LDMLSDA|SBCVSS|RSBVSS|LDCCC|LDMGTEA|EORMI|LDMPLFA|UMLALCCS|SBCPL|EORVSS|STMGEEA|EOR|MULLS|STCVC|CMNGT|TSTCC|LDMLSIA|BLAL|ADDALS|LDMVSIA|ADDGTS|EORGES|AND|MOVHIS|SMULLLS|ADDLS|RSBAL|ANDNE|LDRVSSH|STRVCB|SBCEQS|LDMEQFD|LDCGEL|BICLTS|SUB|SMULLALS|STRMI|MOVGE|STMCCFA|MVNLES|MULCCS|CMPNE|BLNE|UMLALPLS|LDRHIB|ADCLE|LDMCCED|RSCLTS|STMPLFD|UMULLCCS|MOVCCS|CDPCS|LDRNEB|STRALH|LDMGTFD|LDRCS|SBCALS|SMLALS|SMULLGTS|CMNAL|SWPLEB|ADDVSS|RSBLT|STRGTB|BICGT|SUBVSS|LDMPLFD|CMNLS|ANDHIS|STMVSDA|TSTHI|STRMISB|RSCGES|ADCALS|MOV|STMNEIA|STMLEED|TEQMI|SWIEQ|LDRLE|LDRBT|MRSEQ|ORRLTS|MULLE|EORHI|LDRGTB|STMEQEA|STMMIFD|MOVVC|SMLALMIS|SUBGE|CMN|STRCSSB|ANDMIS|ORRPL|MLALS|RSBEQS|ADCNES|BIC|STRSB|RSBPLS|MLAMI|MULPLS|STRHI|SMLALCSS|STMGTFD|BLVS|STRCSH|STMLEDB|UMULLALS|MRSLT|SUBCS|SMULLVS|LDMVCDB|CMPEQ|LDRVCH|RSCMI|TSTVC|STRPL|SWPCS|LDMGTFA|CMPAL|ADDLE|SMLALEQS|LDRLESB|SWPVSB|ADCCSS|STRPLH|SUBCSS|RSBALS|STMEQIA|MVNGES|STCGE|SMLALGE|LDMNEIA|SWPVS|SBCLSS|LDRHISB|LDRALT|EORLSS|SMLALNE|UMULLAL|MRSCC|LDCALL|STMVSIA|SMLALLTS|MULMI|BXLT|STCCC|STMDA|STCGTL|SBCLS|MOVGT|STMLSED|SBCVC|SWPALB|BLE|MVNGE|SMLALAL|UMLALS|SMLALEQ|ORRS|MOVS|LDMGTED|MLALT|MULCS|LDMPL|ADCLTS|ORRPLS|LDRMISH|ADCGES|ORRLS|LDMGEDA|LDMGEIB|UMLALGTS|STCMI|LDMLTEA|MOVLTS|STRGTBT|MCREQ|MCRVC|LDMHI|ADDLES|STCL|LDMMIDA|LDMGEFA|STC|SMLALGT|BXMI|CMPLE|ADCGT|LDMVSFD|ORREQS|UMLALLS|SWILT|LDRGET|BICGE|TSTNE|SBCAL|LDMLSFD|CMNCS|TEQAL|LDMGEFD|LDMEQFA|CMPGE|MOVMIS|SUBLS|LDMCCDB|ADCLES|ANDS|SBCLTS|SBCGES|STMLTFD|SMULLCSS|STMLTFA|STRHIH|MOVLES|EORVCS|BLPL|STMVSFD|STMLS|MVNCC|UMULLNES|LDRGTSH|LDMLEEA|LDREQB|STMHIIA|SBCGT|LDMLEIA|STMGTEA|LDCEQL|LDCNEL|STRLE|STRLSB|LDMMIDB|ANDVSS|RSCLSS|ADCCS|LDRSH|MCRHI|LDRB|MCRAL|UMULLMIS|RSCLES|LDMCSIB|SMLALNES|LDRCSSH|UMLALVC|STRHIBT|MVNS|LDCMIL|SMLALHIS|LDMVCFD|LDMLTIA|MLALE|UMULLHI|ADDGT|LDREQSH|BICCSS|SBCLE|RSCAL|SWIHI|MCRLT|LDRPL|CDPPL|ANDVC|SWIVS|LDMLSFA|BVC|LDMMIIA|SMLALLT|LDMMIED|STMLTED|MVNMIS|STMED|MVNEQS|MLAVC|MOVVCS|LDMEQDB|LDMALFD|ADCVCS|BLGE|ADCMIS|MVN|LDMGEDB|BXNE|LDMDA|ANDAL|ADDGE|MVNPL|CMPGT|STRVSSB|RSCMIS|CDPLT|STMLSIB|CMNHI|SBCEQ|SWPEQ|SMLALGES|UMLALCSS|MULLES|PUSH|POP|NOP)\\b'},
         { token: 'asmcomment.assembly',
           regex: ';.*$' },
         { token: 'variable.parameter.register.assembly',
           regex: '\\b(?:R[0-9]|R1[0-5]|SL|FP|IP|SP|LR|PC|CPSR|SPSR)\\b'},
         { token: 'sectiontitle.assembly',
           regex: 'SECTION\\s(?:INTVEC|CODE|DATA)' },
         { token: 'memdeclare.assembly',
           regex: '\\b(?:ALLOC|ASSIGN)(?:8|16|32)\\b' },
         { token: 'constant.character.assembly',
           regex: '#-?0x[0-9a-fA-F]+' },
           { token: 'constant.character.assembly',
           regex: '#-?[0-9]+' },
         { token: 'label.assembly',
           regex: '^[ \t]*[a-zA-Z0-9_]*' }
    ] }

    this.normalizeRules();
};

AssemblyARMHighlightRules.metaData = { fileTypes: [ 's' ],
      name: 'Assembly arm',
      scopeName: 'source.assembly' };


oop.inherits(AssemblyARMHighlightRules, TextHighlightRules);

exports.AssemblyARMHighlightRules = AssemblyARMHighlightRules;
});

define("ace/mode/folding/coffee",["require","exports","module","ace/lib/oop","ace/mode/folding/fold_mode","ace/range"], function(require, exports, module) {
"use strict";

var oop = require("../../lib/oop");
var BaseFoldMode = require("./fold_mode").FoldMode;
var Range = require("../../range").Range;

var FoldMode = exports.FoldMode = function() {};
oop.inherits(FoldMode, BaseFoldMode);

(function() {

    this.getFoldWidgetRange = function(session, foldStyle, row) {
        var range = this.indentationBlock(session, row);
        if (range)
            return range;

        var re = /\S/;
        var line = session.getLine(row);
        var startLevel = line.search(re);
        if (startLevel == -1 || line[startLevel] != "#")
            return;

        var startColumn = line.length;
        var maxRow = session.getLength();
        var startRow = row;
        var endRow = row;

        while (++row < maxRow) {
            line = session.getLine(row);
            var level = line.search(re);

            if (level == -1)
                continue;

            if (line[level] != "#")
                break;

            endRow = row;
        }

        if (endRow > startRow) {
            var endColumn = session.getLine(endRow).length;
            return new Range(startRow, startColumn, endRow, endColumn);
        }
    };
    this.getFoldWidget = function(session, foldStyle, row) {
        var line = session.getLine(row);
        var indent = line.search(/\S/);
        var next = session.getLine(row + 1);
        var prev = session.getLine(row - 1);
        var prevIndent = prev.search(/\S/);
        var nextIndent = next.search(/\S/);

        if (indent == -1) {
            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? "start" : "";
            return "";
        }
        if (prevIndent == -1) {
            if (indent == nextIndent && line[indent] == "#" && next[indent] == "#") {
                session.foldWidgets[row - 1] = "";
                session.foldWidgets[row + 1] = "";
                return "start";
            }
        } else if (prevIndent == indent && line[indent] == "#" && prev[indent] == "#") {
            if (session.getLine(row - 2).search(/\S/) == -1) {
                session.foldWidgets[row - 1] = "start";
                session.foldWidgets[row + 1] = "";
                return "";
            }
        }

        if (prevIndent!= -1 && prevIndent < indent)
            session.foldWidgets[row - 1] = "start";
        else
            session.foldWidgets[row - 1] = "";

        if (indent < nextIndent)
            return "start";
        else
            return "";
    };

}).call(FoldMode.prototype);

});

define("ace/mode/assembly_arm",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/assembly_arm_highlight_rules","ace/mode/folding/coffee"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextMode = require("./text").Mode;
var AssemblyARMHighlightRules = require("./assembly_arm_highlight_rules").AssemblyARMHighlightRules;
var FoldMode = require("./folding/coffee").FoldMode;

var Mode = function() {
    this.HighlightRules = AssemblyARMHighlightRules;
    this.foldingRules = new FoldMode();
};
oop.inherits(Mode, TextMode);

(function() {
    this.lineCommentStart = ";";
    this.$id = "ace/mode/assembly_arm";
}).call(Mode.prototype);

exports.Mode = Mode;
});
